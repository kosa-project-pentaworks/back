plugins {
    id("java")
    id("org.springframework.boot") version "3.3.4"
    id("io.spring.dependency-management") version "1.1.6"
}

group = "com"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom(annotationProcessor)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.springframework.boot:spring-boot-starter-security")

    // Spring Security OAuth2 client
    implementation("org.springframework.security:spring-security-oauth2-client")

    // Spring Data Commons for additional JPA and repository features
    implementation("org.springframework.data:spring-data-commons")

    // Spring Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // Spring Cloud
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2023.0.3")
    implementation'org.springframework.cloud:spring-cloud-starter-openfeign'

    // xml -> json
    implementation 'org.json:json:20210307'

    // MySQL connector
    implementation("mysql:mysql-connector-java:8.0.33")

    // Thymeleaf extras for Spring Security integration

    // Spring Transaction Management
    implementation("org.springframework:spring-tx")

    // Querydsl with Jakarta
    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated)
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // JWT Authentication
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Common libraries
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation("org.apache.commons:commons-collections4:4.4")

    // Swagger
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.6.0'

    // Lombok for code generation
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    // Development tools
    developmentOnly("org.springframework.boot:spring-boot-devtools")

    // Testing dependencies
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.18.0'
}

tasks.named("test") {
    enabled = false
}

jar {
    enabled = true
    archiveFileName = "app.jar"
}

def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
